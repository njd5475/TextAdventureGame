/** Grammar generation file */
/* @author: timgoh0 */

options {
  IGNORE_CASE = true;
}


PARSER_BEGIN(GameGrammar)
package uk.ac.cam.swdes.sv2;

import java.io.StringReader;
import java.io.Reader;
import java.io.InputStream;

public class GameGrammar{

	//Initialize itself, note that this is a STATIC parser
	private static boolean isInit = false;
	private static GameGrammar g;

	public static void InitStaticParser(Reader r){
		if(!isInit){
			g = new GameGrammar(r);
			isInit = true;
		}else{
			g.ReInit(r);
		}
	}
	
	public static void InitStaticParser(InputStream r){
		if(!isInit){
			g = new GameGrammar(r);
			isInit = true;
		}else{
			g.ReInit(r);
		}
	}

	public static void ParseString(String s) throws ParseException{
		GameGrammar.InitStaticParser(new StringReader(s+"\n")); ///n to simulate cr you'd otherwise get from System.in
		GameGrammar.Input();
	}

}

PARSER_END(GameGrammar)

TOKEN : //Directions
{
    < NORTH: "north" | "n" >
  | < EAST: "east" | "e"  >
  | < SOUTH: "south" | "s" >
  | < WEST: "west" | "w" >
  | < UP: "up" | "u" >
  | < DOWN: "down" | "d" >
}

TOKEN : //Overall commands
{
	<QUIT: "exit" | "quit" >
}

TOKEN: //Actions, note whitespace after to separate operands
{
	< TAKE: "take " >
  | < GIVE: "give " >
  |	< DROP: "drop " >
}

TOKEN: //Single arg operations
{
	< LOOK: "look">
  | < INVENTORY : "inventory" | "i" >
}

TOKEN: //String, for matching items
{
	<  OBJECT_NAME : (["a"-"z"])+ >
}

void Input() :
{ GameState s = GameState.getInstance(); }
{
	  (Direction())
	| (Actions())
	| (TupleActions())
	| ( <QUIT> { System.exit(0); } )
	"\n"
}

void Direction() :
{ GameState s = GameState.getInstance(); }
{
	(   <NORTH>
	  	{ s.moveDirection(Direction.NORTH); }
	  	| <EAST>
	  	{ s.moveDirection(Direction.EAST); }
	  	| <SOUTH>
	  	{ s.moveDirection(Direction.SOUTH); }
	  	| <WEST>
	  	{ s.moveDirection(Direction.WEST); }
	  	| <UP>
	  	{ s.moveDirection(Direction.UP); }
	  	| <DOWN>
	  	{ s.moveDirection(Direction.DOWN); }
	)
}

void Actions() :
{
	GameState s = GameState.getInstance();
}
{
	  <LOOK> { s.look(); }
	| <INVENTORY> { s.listInventory(); }
}

void TupleActions() :
{ 
	GameState s = GameState.getInstance(); 
	Token item;
	Token person;
}
{
	(     <TAKE> 
		  item = <OBJECT_NAME>
	  	{ s.take(item.image); }
	  	| <GIVE>
	      item = <OBJECT_NAME>
	      " to "
	      person = <OBJECT_NAME>
	  	{ s.give(item.image, person.image); }
	  	| <DROP>
	  	  item = <OBJECT_NAME>
	  	{ s.drop(item.image); }
	)
}

